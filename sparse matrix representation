#include<stdio.h>
typedef struct
{
 int  row;
 int column;
 int value;
}mat;
mat a[20],b[20],c[20],t[20];
int main()
{
 int x[5][5],y[5][5];
 int i,j,k,m,n,p,r;
 printf("enter the no of rows and columns");
 scanf("%d %d",&m,&n);
 for(i=0;i<m;i++)
 {
  for(j=0;j<n;j++)
  {
   printf("enter a number");
   scanf("%d",&x[i][j]);
  }
 }
 for(i=0;i<m;i++)
 {
  for(j=0;j<n;j++)
  {
   printf("enter a number");
   scanf("%d",&y[i][j]);
  }
 }
a[0].row=m;
a[0].column=n;
k=1;
 for(i=0;i<m;i++)
 {
  for(j=0;j<n;j++)
  {
   if(x[i][j]!=0)
     {
     a[k].row=i;
     a[k].column=j;
     a[k].value=x[i][j];
     k=k+1;
     }
  }
 }
a[0].value=k-1;
b[0].row=m;
b[0].column=n;
k=1;
 for(i=0;i<m;i++)
 {
  for(j=0;j<n;j++)
  {
   if(y[i][j]!=0)
   {
   b[k].row=i;
   b[k].column=j;
   b[k].value=y[i][j];
   k=k+1;
   }
  }
 }
b[0].value=k-1;
k=0;
t[0].row=a[0].column;
t[0].column=a[0].row;
t[0].value=a[0].value;
k=1;
for(i=0;i<=a[0].column;i++)
  {
  for(j=1;j<=a[0].value;j++)
    {
      if(a[j].column==i)
      {
        t[k].row=a[j].column;
        t[k].column=a[j].row;
        t[k].value=a[j].value;
        k=k+1;
      }
    }
  }
 printf("1stmatrix\n");

 for(k=0;k<=a[0].value;k++)
 {
  printf("(%d,%d,%d)\n",a[k].row,a[k].column,a[k].value);
 }
 printf("2nd matrix\n");
 for(k=0;k<=b[0].value;k++)
 {
  printf("(%d,%d,%d)\n",b[k].row,b[k].column,b[k].value);
 }
c[0].row=m;
c[0].column=n;
printf("sum of matrices\n");
r=1,p=1,k=1;
while(r<=a[0].value&&p<=b[0].value)
{
  if(a[r].row==b[p].row&&a[r].column==b[p].column)
 {
   c[k].row=a[r].row;
   c[k].column=a[r].column;
   c[k].value=a[r].value+b[p].value;
   k++;
   r++;
   p++;
 }
 else if(a[r].row<b[p].row)
 {
   c[k].row=a[r].row;
   c[k].column=a[r].column;
   c[k].value=a[r].value;
   k++;
   r++;
 }
 else if(a[r].row==b[p].row&&a[r].column<b[p].column)
 {
  c[k].row=a[r].row;
   c[k].column=a[r].column;
   c[k].value=a[r].value;
   k++;
   r++;
 }
 else
 {
   c[k].row=b[p].row;
   c[k].column=b[p].column;
   c[k].value=b[p].value;
   k++;
   p++;
 }
}
while(r<=a[0].value)
{
   c[k].row=a[r].row;
   c[k].column=a[r].column;
   c[k].value=a[r].value;
   k++;
   r++;
}
while(p<=b[0].value)
{
   c[k].row=b[p].row;
   c[k].column=b[p].column;
   c[k].value=b[p].value;
   k++;
   p++;
}
c[0].value=k-1;
for(k=0;k<=c[0].value;k++)
{
 printf("(%d,%d,%d)\n",c[k].row,c[k].column,c[k].value);
}
 printf("transpose of 1st matrix\n");
for(k=0;k<=a[0].value;k++)
{
 printf("(%d,%d,%d)\n",t[k].row,t[k].column,t[k].value);
}
return 0;
}
